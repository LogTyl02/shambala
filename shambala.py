####
##	Shambala, An Indian Journey
##	Tyler Logan, 2013
##  
##  Much of the current code structure stolen from
##  https://github.com/sjbrown/writing_games_tutorial/blob/example1/code_examples/example.py

import pygame, sys
from pygame.locals import *

def debug(msg):
	print msg

# Initialization
SCREENWIDTH, SCREENHEIGHT = 800, 600
SCREENSIZE = (SCREENWIDTH, SCREENHEIGHT)

WHITE = pygame.Color(255, 255, 255)

# ~~~ * Classes * ~~~

class State(object):
	menu = 'menu'
	play = 'play'
	quit = 'quit'

class Menu():
	menuJourneyText = 'Journey Onward!'

# ------------------------------------------------------------------------------

class Event:
	"""Superclass for any events generated by an object and sent to the EventManager"""
	def __init__(self):
		self.name = 'Generic Event'

class TickEvent(Event):
	def __init__(self):
		self.name = 'CPU Tick Event'

class QuitEvent(Event):
	def __init__(self):
		self.name = 'Program Quit Event'

class GameStartedEvent(Event):
	def __init__(self):
		self.name = 'Game Started Event'

class MenuRequest(Event):
	def __init__(self):
		self.name = "Menu Request Event"

# ------------------------------------------------------------------------------



# ------------------------------------------------------------------------------

class EventManager:
	def __init__(self):
		from weakref import WeakKeyDictionary
		self.listeners = WeakKeyDictionary()
		self.eventQueue = []

	def register_listener(self, listener):
		self.listeners[listener] = 1

	def unregister_listener(self, listener):
		if listener in self.listeners:
			del self.listeners[listener]

	def post(self, event):
		if not is_instance(event, tick_event):
			debug( "	Message: " + event.name)
		for listener in self.listener:
			listener.Notify(event)

# ------------------------------------------------------------------------------

class KeyboardController:
	def __init__(self, evManager):
		self.ev_manager = ev_manager
		self.ev_manager.register_listener(self)

	def notify(self, event):
		if is_instance(event, TickEvent):
			# Handle Input Events
			for event in pygame.event.get():
				ev = None
				if event.type == QUIT:
					ev = QuitEvent()
				elif event.type == KEYDOWN and event.key == K_ESCAPE:
					ev = QuitEvent()
				elif event.type == KEYDOWN and event.key == K_m:
					ev = MenuRequest()

				if ev:
					self.ev_manager.Post(ev)


# ------------------------------------------------------------------------------

class CPUSpinnerController:
	"""No idea what the fuck this is."""
	def __init__(self, evManager):
		self.evManager = evManager
		self.evManager.register_listener(self)

		self.keep_going = 1

	def run(self):
		while self.keep_going:
			event = tick_event()
			self.evManager.Post(event)

	def notify(self, event):
		if is_instance(event, QuitEvent):
			# This will stop the while loop
			self.keep_going = False

# ------------------------------------------------------------------------------

class CharacterSprite(pygame.sprite.Sprite):
	def __init__(self, group=None):
		pygame.sprite.Sprite.__init__(self, group)

		character_surf = pygame.Surface((64,64)) # Arbitrary sprite size for now.
		character_surf = character_surf.convert_alpha()
		character_surf.fill((0,0,0,0)) # Transparent for now.
		pygame.draw.circle( character_surf, (255, 0, 0), (32, 32), 32) # Replace these magic numbers with color codes later.
		self.image = character_surf
		self.rect = character_surf.get_rect()

	def update(self):
		if self.move_to:
			self.rect.center = self.move_to
			self.move_to = None
# ------------------------------------------------------------------------------

class GameView:
	def __init__(self, evManager):
		self.evManager = evManager
		self.evManager.register_listener(self)
		self.size = self.width, self.height = 800, 600

		pygame.init()
		self.display_surf = pygame.display.set_mode(self.size, pygame.HWSURFACE)
		pygame.display.set_caption('Shambala')
		self.background.fill(0, 0 , 0) # Change to a color code later
		font = pygame.font.Font(None, 30)
		text = " ' Press SPACE BAR to Start ' "
		textIMG = font.render(text, 1, (255, 0, 0))
		self.background.blit(textImg, (0, 0))
		self.display_surf.blit(self.background, (0,0))
		pygame.display.flip()

		self.back_sprites = pygame.sprite.RenderUpdates()
		self.front_sprites = pygame.sprite.RenderUpdates()

	def show_map(self, game_map):
		# Clear the screen first
		self.background.fill(0, 0, 0)
		self.display_surf.blit(self.background, (0,0))
		pygame.display.flip()

		# Use this square rect as a cursor and go through
		# the columns and rows and assign the rect
		# positions of the sector sprites
		square_rect = pygame.Rect((-128, 10, 128, 128))

		column = 0
		for sector in game_map.sectors:
			if column < 3:
				square_rect = square_rect.move(138, 0)
			else:
				column = 0
				square_rect = square_rect.move( -(138*2), 138)
			column += 1
			new_sprite = SectorSprite(sector, self.back_sprites)
			new_sprite.rect = square_rect
			new_sprite = None

	def ShowCharacter(self, character):
		sector = character.sector
		character_sprite = CharactorSprite(self.front_sprites)
		sector_sprite = self.GetSectorSprite(sector)
		character_sprite.rect.center = sector_sprite.rect.center

	def MoveCharacter(self, character):
		character_sprite = self.GetSectorSprite(character)

		sector = character.sector
		character_sprite.move_to = sector_sprite.rect.center

	def GetCharacterSprite(self, character):
		for s in self.front_sprites:
			return s
		return None

	def Notify(self, event):
		if is_instance(event, tick_event):
			# DRAW EVERYTHING
			self.back_sprites.clear(self.display_surf, self.background)
			self.front_sprites.clear(self.display_surf, self.background)

			self.back_sprites.update()
			self.front_sprites.update()

			dirty_rects1 = self.back_sprites.draw(self.display_surf)
			dirty_rects2 = self.front_sprites.draw(self.display_surf)

			dirty_rects = dirty_rects1 + dirty_rects2
			pygame.display.update(dirty_rects)

		elif is_instance(event, CharacterPlaceEvent):
			self.ShowCharacter(event.character)

		elif is_instance(event, CharacterMoveEvent):
			self.MoveCharacter(event.character)


# ------------------------------------------------------------------------------			

class Game:
	def __init__(self):
		self.running = True

	def terminate(self):
		pygame.quit()
		sys.exit()

	def on_initialize(self):
		pygame.init()
		self.display_surf = pygame.display.set_mode(self.size, pygame.HWSURFACE)
		pygame.display.set_caption('Shambala')
		self.running = True

	def event(self, event):
		if event.type == pygame.QUIT:
			self.running = False

	def loop(self):
		pass

	def render(self):
		pass

	def cleanup(self):
		pass

	def execute(self):
		if self.on_initialize() == False:
			self.running = False

		while (self.running):
			for event in pygame.event.get():
				self.event(event)
			self.loop()
			self.render()
			self.cleanup()

# ------------------------------------------------------------------------------

if __name__ == "__main__" :
	game = Game()
	game.execute()







